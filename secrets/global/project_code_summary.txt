----------------------------------------------
1.  README.md
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
2.  infra/argo-bootstrap/argocd-core-app.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-core-app
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/girmaat/kubernetes-devsecops-platform-aws.git
    targetRevision: main
    path: apps/platform
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


----------------------------------------------
3.  charts/my-vote-api/Chart.yaml
----------------------------------------------

apiVersion: v2
name: my-vote-api
description: Helm chart for my-vote-api service
type: application
version: 0.1.0
appVersion: "1.0.0"


----------------------------------------------
4.  charts/my-vote-api/templates/_helpers.tpl
----------------------------------------------

{{- define "my-vote-api.fullname" -}}
{{ .Release.Name }}-{{ .Chart.Name }}
{{- end }}


----------------------------------------------
5.  charts/my-vote-api/templates/deployment.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - containerPort: {{ .Values.containerPort }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 10
            timeoutSeconds: 2

          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 5
            timeoutSeconds: 2


----------------------------------------------
6.  charts/my-vote-api/templates/hpa.yaml
----------------------------------------------

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Chart.Name }}
  minReplicas: {{ .Values.hpa.minReplicas }}
  maxReplicas: {{ .Values.hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.hpa.targetCPUUtilizationPercentage }}


----------------------------------------------
7.  charts/my-vote-api/templates/service.yaml
----------------------------------------------

apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ .Chart.Name }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.containerPort }}


----------------------------------------------
8.  charts/my-vote-api/values.yaml
----------------------------------------------

replicaCount: 1

image:
  repository: nginx
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

containerPort: 80

hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60

readinessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 5
  timeoutSeconds: 2

livenessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 10
  timeoutSeconds: 2


----------------------------------------------
9.  charts/my-vote-ui/.helmignore
----------------------------------------------

# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*.orig
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/


----------------------------------------------
10.  charts/my-vote-ui/Chart.yaml
----------------------------------------------

apiVersion: v2
name: my-vote-ui
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: "1.16.0"


----------------------------------------------
11.  charts/my-vote-ui/templates/_helpers.tpl
----------------------------------------------

{{- define "my-vote-ui.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{- define "my-vote-ui.fullname" -}}
{{- if .Values.fullnameOverride }}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{- define "my-vote-ui.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{{- define "my-vote-ui.labels" -}}
app.kubernetes.io/name: {{ include "my-vote-ui.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
helm.sh/chart: {{ include "my-vote-ui.chart" . }}
{{- end }}

{{- define "my-vote-ui.selectorLabels" -}}
app.kubernetes.io/name: {{ include "my-vote-ui.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{- define "my-vote-ui.serviceAccountName" -}}
{{- if .Values.serviceAccount.create }}
{{- default (include "my-vote-ui.fullname" .) .Values.serviceAccount.name }}
{{- else }}
{{- default "default" .Values.serviceAccount.name }}
{{- end }}
{{- end }}


----------------------------------------------
12.  charts/my-vote-ui/templates/deployment.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.containerPort }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /
              
              port: {{ .Values.containerPort }}
            initialDelaySeconds: 5
            timeoutSeconds: 1


----------------------------------------------
13.  charts/my-vote-ui/templates/hpa.yaml
----------------------------------------------

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Chart.Name }}
  minReplicas: {{ .Values.hpa.minReplicas }}
  maxReplicas: {{ .Values.hpa.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.hpa.targetCPUUtilizationPercentage }}


----------------------------------------------
14.  charts/my-vote-ui/templates/service.yaml
----------------------------------------------

apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ .Chart.Name }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.containerPort }}


----------------------------------------------
15.  charts/my-vote-ui/values.yaml
----------------------------------------------

replicaCount: 1

image:
  repository: ghcr.io/girmaat/my-vote-ui  
  tag: latest
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

containerPort: 80

hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 60

readinessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 5
  timeoutSeconds: 1

livenessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 10
  timeoutSeconds: 1


----------------------------------------------
16.  apps/platform/kustomization.yaml
----------------------------------------------

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - argocd-core.yaml
  - my-vote-api-dev.yaml
  - my-vote-ui-dev.yaml
  - my-vote-ui-staging.yaml



----------------------------------------------
17.  apps/platform/my-vote-ui-staging.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: my-vote-ui-staging
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/girmaat/kubernetes-devsecops-platform-aws.git
    targetRevision: main
    path: workloads/my-vote-ui/overlays/staging
  destination:
    server: https://kubernetes.default.svc
    namespace: myvote-staging
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


----------------------------------------------
18.  apps/platform/sealed-secrets.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
19.  apps/platform/my-vote-api-dev.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: my-vote-api-dev
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/girmaat/kubernetes-devsecops-platform-aws.git
    targetRevision: main
    path: workloads/my-vote-api/overlays/dev
  destination:
    server: https://kubernetes.default.svc
    namespace: myvote-dev
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


----------------------------------------------
20.  apps/platform/my-vote-ui-dev.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: my-vote-ui-dev
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/girmaat/kubernetes-devsecops-platform-aws.git
    targetRevision: main
    path: workloads/my-vote-ui/overlays/dev
  destination:
    server: https://kubernetes.default.svc
    namespace: myvote-dev
  syncPolicy:
    automated:
      selfHeal: true
      prune: true


----------------------------------------------
21.  apps/platform/argocd-core.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-core
  namespace: argocd
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  source:
    repoURL: https://github.com/girmaat/kubernetes-devsecops-platform-aws.git
    targetRevision: main
    path: apps/platform/argocd/overlays/dev   
  project: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true


----------------------------------------------
22.  apps/platform/argocd/overlays/dev/kustomization.yaml
----------------------------------------------

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: argocd

resources:
  - ../../base

patchesStrategicMerge:
  # Optional patches (comment out if you don't need them)
  - patch-argocd-application-controller-labels.yaml
  - patch-argocd-repo-server-labels.yaml
  - patch-argocd-server-labels.yaml

# Optional: set common labels for log collection, observability, etc.
commonLabels:
  environment: dev
  app.kubernetes.io/managed-by: argocd


----------------------------------------------
23.  apps/platform/argocd/overlays/dev/patch-argocd-application-controller-labels.yaml
----------------------------------------------

# patch-argocd-server-labels.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    log-collect: enabled


----------------------------------------------
24.  apps/platform/argocd/overlays/dev/patch-argocd-repo-server-labels.yaml
----------------------------------------------

# patch-argocd-server-labels.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    log-collect: enabled


----------------------------------------------
25.  apps/platform/argocd/overlays/dev/patch-argocd-server-labels.yaml
----------------------------------------------

# patch-argocd-server-labels.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
  namespace: argocd
  labels:
    log-collect: enabled


----------------------------------------------
26.  .gitignore
----------------------------------------------

# Terraform
**/.terraform/
*.tfstate
*.tfstate.*
crash.log
terraform.tfvars
.terraform.lock.hcl

# Terraform plan files
*.tfplan
tfplan

# Kubernetes
.kube/
*.kubeconfig
*.yaml~       # editor backup files
*.sealed.yaml # uncommitted sealed secret outputs

# Helm
*.tgz
.chart-test/

# VSCode
.vscode/
.history/
.code-workspace

# Python virtualenv & build artifacts
__pycache__/
*.py[cod]
*.egg
*.egg-info/
dist/
build/
venv/
.env
.env.*

# Docker
*.tar
*.log
docker-compose.override.yml

# Jenkins
secrets/
jenkins_home/
jobs/
workspace/
*.jenkinsfile_backup

# Node/JS (for frontend apps)
node_modules/
npm-debug.log*
yarn-error.log*

# OS/system
.DS_Store
Thumbs.db
desktop.ini

# Logs
*.log
logs/

# Misc
.idea/
*.swp
*.bak

scripts/
apps/platform/argocd/base/

----------------------------------------------
27.  workloads/my-vote-api/base/global/argocd-project-default.yaml
----------------------------------------------

apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: default
  namespace: argocd
spec:
  description: Default project for ArgoCD
  sourceRepos:
    - '*'
  destinations:
    - namespace: '*'
      server: '*'
  clusterResourceWhitelist:
    - group: '*'
      kind: '*'


----------------------------------------------
28.  workloads/my-vote-api/base/global/kustomization.yaml
----------------------------------------------

resources:
  - argocd-project-default.yaml


----------------------------------------------
29.  workloads/my-vote-api/overlays/dev/values.yaml
----------------------------------------------

replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

resources:
  limits:
    cpu: 150m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 64Mi

containerPort: 80

hpa:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 60

readinessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 5
  timeoutSeconds: 2

livenessProbe:
  httpGet:
    path: /
    port: 80
  initialDelaySeconds: 10
  timeoutSeconds: 2


----------------------------------------------
30.  workloads/my-vote-api/overlays/dev/kustomization.yaml
----------------------------------------------

resources:
  - rendered.yaml


----------------------------------------------
31.  workloads/my-vote-api/overlays/dev/rendered.yaml
----------------------------------------------

---
# Source: my-vote-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-vote-api
spec:
  type: ClusterIP
  selector:
    app: my-vote-api
  ports:
    - port: 80
      targetPort: 80
---
# Source: my-vote-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-vote-api
  labels:
    app.kubernetes.io/name: my-vote-api
    helm.sh/chart: my-vote-api-0.1.0
    app.kubernetes.io/instance: my-vote-api
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-vote-api
  template:
    metadata:
      labels:
        app: my-vote-api
    spec:
      containers:
        - name: my-vote-api
          image: "nginx:stable"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 2

          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 2
---
# Source: my-vote-api/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-vote-api
  labels:
    app.kubernetes.io/name: my-vote-api
    helm.sh/chart: my-vote-api-0.1.0
    app.kubernetes.io/instance: my-vote-api
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-vote-api
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60


----------------------------------------------
32.  workloads/my-vote-ui/overlays/dev/values.yaml
----------------------------------------------

replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 80

resources:
  limits:
    cpu: 100m
    memory: 64Mi
  requests:
    cpu: 50m
    memory: 32Mi

containerPort: 80


----------------------------------------------
33.  workloads/my-vote-ui/overlays/dev/kustomization.yaml
----------------------------------------------

resources:
  - rendered.yaml


----------------------------------------------
34.  workloads/my-vote-ui/overlays/dev/rendered.yaml
----------------------------------------------

---
# Source: my-vote-ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-vote-ui
  labels:
    app.kubernetes.io/name: my-vote-ui
    helm.sh/chart: my-vote-ui-0.1.0
    app.kubernetes.io/instance: my-vote-ui
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app: my-vote-ui
  ports:
    - port: 80
      targetPort: 80
---
# Source: my-vote-ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-vote-ui
  labels:
    app.kubernetes.io/name: my-vote-ui
    helm.sh/chart: my-vote-ui-0.1.0
    app.kubernetes.io/instance: my-vote-ui
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-vote-ui
  template:
    metadata:
      labels:
        app: my-vote-ui
    spec:
      containers:
        - name: my-vote-ui
          image: "nginx:stable"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /
              
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 1
---
# Source: my-vote-ui/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-vote-ui
  labels:
    app.kubernetes.io/name: my-vote-ui
    helm.sh/chart: my-vote-ui-0.1.0
    app.kubernetes.io/instance: my-vote-ui
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-vote-ui
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60


----------------------------------------------
35.  workloads/my-vote-ui/overlays/prod/values.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
36.  workloads/my-vote-ui/overlays/prod/kustomization.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
37.  workloads/my-vote-ui/overlays/staging/values.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
38.  workloads/my-vote-ui/overlays/staging/kustomization.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
39.  platform/argocd/base/base/clusterrole-argocd-server.yaml
----------------------------------------------

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argocd-server
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "pods", "services", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["argoproj.io"]
    resources: ["applications", "appprojects", "applicationsets"]
    verbs: ["get", "list", "watch"]


----------------------------------------------
40.  platform/argocd/base/base/clusterrolebinding-argocd-server.yaml
----------------------------------------------

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argocd-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argocd-server
subjects:
  - kind: ServiceAccount
    name: argocd-server
    namespace: argocd


----------------------------------------------
41.  platform/argocd/base/base/deployment-argocd-repo-server.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/part-of: argocd
  name: argocd-repo-server
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-repo-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-repo-server
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-repo-server
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
      automountServiceAccountToken: false
      containers:
      - args:
        - /usr/local/bin/argocd-repo-server
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: auth
              name: argocd-redis
        - name: ARGOCD_RECONCILIATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: timeout.reconciliation
              name: argocd-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_LOGFORMAT
          valueFrom:
            configMapKeyRef:
              key: reposerver.log.format
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_LOGLEVEL
          valueFrom:
            configMapKeyRef:
              key: reposerver.log.level
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_LOG_FORMAT_TIMESTAMP
          valueFrom:
            configMapKeyRef:
              key: log.format.timestamp
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
          valueFrom:
            configMapKeyRef:
              key: reposerver.parallelism.limit
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_LISTEN_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: reposerver.listen.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_LISTEN_METRICS_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: reposerver.metrics.listen.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_DISABLE_TLS
          valueFrom:
            configMapKeyRef:
              key: reposerver.disable.tls
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_MIN_VERSION
          valueFrom:
            configMapKeyRef:
              key: reposerver.tls.minversion
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_MAX_VERSION
          valueFrom:
            configMapKeyRef:
              key: reposerver.tls.maxversion
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_CIPHERS
          valueFrom:
            configMapKeyRef:
              key: reposerver.tls.ciphers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: reposerver.repo.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_SERVER
          valueFrom:
            configMapKeyRef:
              key: redis.server
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_COMPRESSION
          valueFrom:
            configMapKeyRef:
              key: redis.compression
              name: argocd-cmd-params-cm
              optional: true
        - name: REDISDB
          valueFrom:
            configMapKeyRef:
              key: redis.db
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: reposerver.default.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: otlp.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_OTLP_INSECURE
          valueFrom:
            configMapKeyRef:
              key: otlp.insecure
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_OTLP_HEADERS
          valueFrom:
            configMapKeyRef:
              key: otlp.headers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_OTLP_ATTRS
          valueFrom:
            configMapKeyRef:
              key: otlp.attrs
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
          valueFrom:
            configMapKeyRef:
              key: reposerver.max.combined.directory.manifests.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
          valueFrom:
            configMapKeyRef:
              key: reposerver.plugin.tar.exclusions
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_PLUGIN_USE_MANIFEST_GENERATE_PATHS
          valueFrom:
            configMapKeyRef:
              key: reposerver.plugin.use.manifest.generate.paths
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
          valueFrom:
            configMapKeyRef:
              key: reposerver.allow.oob.symlinks
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
          valueFrom:
            configMapKeyRef:
              key: reposerver.streamed.manifest.max.tar.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
          valueFrom:
            configMapKeyRef:
              key: reposerver.streamed.manifest.max.extracted.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_HELM_MANIFEST_MAX_EXTRACTED_SIZE
          valueFrom:
            configMapKeyRef:
              key: reposerver.helm.manifest.max.extracted.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_DISABLE_HELM_MANIFEST_MAX_EXTRACTED_SIZE
          valueFrom:
            configMapKeyRef:
              key: reposerver.disable.helm.manifest.max.extracted.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REVISION_CACHE_LOCK_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: reposerver.revision.cache.lock.timeout
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_GIT_MODULES_ENABLED
          valueFrom:
            configMapKeyRef:
              key: reposerver.enable.git.submodule
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_GIT_LS_REMOTE_PARALLELISM_LIMIT
          valueFrom:
            configMapKeyRef:
              key: reposerver.git.lsremote.parallelism.limit
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_GIT_REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: reposerver.git.request.timeout
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_GRPC_MAX_SIZE_MB
          valueFrom:
            configMapKeyRef:
              key: reposerver.grpc.max.size
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_REPO_SERVER_INCLUDE_HIDDEN_DIRECTORIES
          valueFrom:
            configMapKeyRef:
              key: reposerver.include.hidden.directories
              name: argocd-cmd-params-cm
              optional: true
        - name: HELM_CACHE_HOME
          value: /helm-working-dir
        - name: HELM_CONFIG_HOME
          value: /helm-working-dir
        - name: HELM_DATA_HOME
          value: /helm-working-dir
        image: quay.io/argoproj/argocd:v3.0.6
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz?full=true
            port: 8084
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        name: argocd-repo-server
        ports:
        - containerPort: 8081
        - containerPort: 8084
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8084
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/tls
          name: tls-certs
        - mountPath: /app/config/gpg/source
          name: gpg-keys
        - mountPath: /app/config/gpg/keys
          name: gpg-keyring
        - mountPath: /app/config/reposerver/tls
          name: argocd-repo-server-tls
        - mountPath: /tmp
          name: tmp
        - mountPath: /helm-working-dir
          name: helm-working-dir
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
      initContainers:
      - command:
        - /bin/cp
        - -n
        - /usr/local/bin/argocd
        - /var/run/argocd/argocd-cmp-server
        image: quay.io/argoproj/argocd:v3.0.6
        name: copyutil
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: argocd-repo-server
      volumes:
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - configMap:
          name: argocd-tls-certs-cm
        name: tls-certs
      - configMap:
          name: argocd-gpg-keys-cm
        name: gpg-keys
      - emptyDir: {}
        name: gpg-keyring
      - emptyDir: {}
        name: tmp
      - emptyDir: {}
        name: helm-working-dir
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - emptyDir: {}
        name: var-files
      - emptyDir: {}
        name: plugins


----------------------------------------------
42.  platform/argocd/base/base/deployment-argocd-server.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: argocd-server
    app.kubernetes.io/part-of: argocd
  name: argocd-server
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-server
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-server
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
      containers:
      - args:
        - /usr/local/bin/argocd-server
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: auth
              name: argocd-redis
        - name: ARGOCD_SERVER_INSECURE
          valueFrom:
            configMapKeyRef:
              key: server.insecure
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_BASEHREF
          valueFrom:
            configMapKeyRef:
              key: server.basehref
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_ROOTPATH
          valueFrom:
            configMapKeyRef:
              key: server.rootpath
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_LOGFORMAT
          valueFrom:
            configMapKeyRef:
              key: server.log.format
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              key: server.log.level
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_REPO_SERVER
          valueFrom:
            configMapKeyRef:
              key: repo.server
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_DEX_SERVER
          valueFrom:
            configMapKeyRef:
              key: server.dex.server
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_DISABLE_AUTH
          valueFrom:
            configMapKeyRef:
              key: server.disable.auth
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_ENABLE_GZIP
          valueFrom:
            configMapKeyRef:
              key: server.enable.gzip
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_REPO_SERVER_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              key: server.repo.server.timeout.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_X_FRAME_OPTIONS
          valueFrom:
            configMapKeyRef:
              key: server.x.frame.options
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_CONTENT_SECURITY_POLICY
          valueFrom:
            configMapKeyRef:
              key: server.content.security.policy
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_REPO_SERVER_PLAINTEXT
          valueFrom:
            configMapKeyRef:
              key: server.repo.server.plaintext
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_REPO_SERVER_STRICT_TLS
          valueFrom:
            configMapKeyRef:
              key: server.repo.server.strict.tls
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_DEX_SERVER_PLAINTEXT
          valueFrom:
            configMapKeyRef:
              key: server.dex.server.plaintext
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_DEX_SERVER_STRICT_TLS
          valueFrom:
            configMapKeyRef:
              key: server.dex.server.strict.tls
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_MIN_VERSION
          valueFrom:
            configMapKeyRef:
              key: server.tls.minversion
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_MAX_VERSION
          valueFrom:
            configMapKeyRef:
              key: server.tls.maxversion
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_TLS_CIPHERS
          valueFrom:
            configMapKeyRef:
              key: server.tls.ciphers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_CONNECTION_STATUS_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: server.connection.status.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_OIDC_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: server.oidc.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_LOGIN_ATTEMPTS_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: server.login.attempts.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_STATIC_ASSETS
          valueFrom:
            configMapKeyRef:
              key: server.staticassets
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: server.app.state.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_SERVER
          valueFrom:
            configMapKeyRef:
              key: redis.server
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_COMPRESSION
          valueFrom:
            configMapKeyRef:
              key: redis.compression
              name: argocd-cmd-params-cm
              optional: true
        - name: REDISDB
          valueFrom:
            configMapKeyRef:
              key: redis.db
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: server.default.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_MAX_COOKIE_NUMBER
          valueFrom:
            configMapKeyRef:
              key: server.http.cookie.maxnumber
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_LISTEN_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: server.listen.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_METRICS_LISTEN_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: server.metrics.listen.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_OTLP_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: otlp.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_OTLP_INSECURE
          valueFrom:
            configMapKeyRef:
              key: otlp.insecure
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_OTLP_HEADERS
          valueFrom:
            configMapKeyRef:
              key: otlp.headers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_OTLP_ATTRS
          valueFrom:
            configMapKeyRef:
              key: otlp.attrs
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_NAMESPACES
          valueFrom:
            configMapKeyRef:
              key: application.namespaces
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_ENABLE_PROXY_EXTENSION
          valueFrom:
            configMapKeyRef:
              key: server.enable.proxy.extension
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_K8SCLIENT_RETRY_MAX
          valueFrom:
            configMapKeyRef:
              key: server.k8sclient.retry.max
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
          valueFrom:
            configMapKeyRef:
              key: server.k8sclient.retry.base.backoff
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_API_CONTENT_TYPES
          valueFrom:
            configMapKeyRef:
              key: server.api.content.types
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SERVER_WEBHOOK_PARALLELISM_LIMIT
          valueFrom:
            configMapKeyRef:
              key: server.webhook.parallelism.limit
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_NEW_GIT_FILE_GLOBBING
          valueFrom:
            configMapKeyRef:
              key: applicationsetcontroller.enable.new.git.file.globbing
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATIONSET_CONTROLLER_SCM_ROOT_CA_PATH
          valueFrom:
            configMapKeyRef:
              key: applicationsetcontroller.scm.root.ca.path
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATIONSET_CONTROLLER_ALLOWED_SCM_PROVIDERS
          valueFrom:
            configMapKeyRef:
              key: applicationsetcontroller.allowed.scm.providers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_SCM_PROVIDERS
          valueFrom:
            configMapKeyRef:
              key: applicationsetcontroller.enable.scm.providers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_HYDRATOR_ENABLED
          valueFrom:
            configMapKeyRef:
              key: hydrator.enabled
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_SYNC_WITH_REPLACE_ALLOWED
          valueFrom:
            configMapKeyRef:
              key: server.sync.replace.allowed
              name: argocd-cmd-params-cm
              optional: true
        image: quay.io/argoproj/argocd:v3.0.6
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz?full=true
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 30
          timeoutSeconds: 5
        name: argocd-server
        ports:
        - containerPort: 8080
        - containerPort: 8083
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 30
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /app/config/ssh
          name: ssh-known-hosts
        - mountPath: /app/config/tls
          name: tls-certs
        - mountPath: /app/config/server/tls
          name: argocd-repo-server-tls
        - mountPath: /app/config/dex/tls
          name: argocd-dex-server-tls
        - mountPath: /home/argocd
          name: plugins-home
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/params
          name: argocd-cmd-params-cm
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: argocd-server
      volumes:
      - emptyDir: {}
        name: plugins-home
      - emptyDir: {}
        name: tmp
      - configMap:
          name: argocd-ssh-known-hosts-cm
        name: ssh-known-hosts
      - configMap:
          name: argocd-tls-certs-cm
        name: tls-certs
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - name: argocd-dex-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-dex-server-tls
      - configMap:
          items:
          - key: server.profile.enabled
            path: profiler.enabled
          name: argocd-cmd-params-cm
          optional: true
        name: argocd-cmd-params-cm


----------------------------------------------
43.  platform/argocd/base/base/kustomization.yaml
----------------------------------------------

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - serviceaccount-argocd-server.yaml
  - clusterrole-argocd-server.yaml
  - clusterrolebinding-argocd-server.yaml
  - deployment-argocd-server.yaml
  - deployment-argocd-repo-server.yaml
  - statefulset-argocd-application-controller.yaml

----------------------------------------------
44.  platform/argocd/base/base/serviceaccount-argocd-server.yaml
----------------------------------------------

apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-server
  namespace: argocd


----------------------------------------------
45.  platform/argocd/base/base/statefulset-argocd-application-controller.yaml
----------------------------------------------

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/component: application-controller
    app.kubernetes.io/name: argocd-application-controller
    app.kubernetes.io/part-of: argocd
  name: argocd-application-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argocd-application-controller
  serviceName: argocd-application-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argocd-application-controller
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: argocd-application-controller
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/part-of: argocd
              topologyKey: kubernetes.io/hostname
            weight: 5
      containers:
      - args:
        - /usr/local/bin/argocd-application-controller
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: auth
              name: argocd-redis
        - name: ARGOCD_CONTROLLER_REPLICAS
          value: '1'
        - name: ARGOCD_RECONCILIATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: timeout.reconciliation
              name: argocd-cm
              optional: true
        - name: ARGOCD_HARD_RECONCILIATION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: timeout.hard.reconciliation
              name: argocd-cm
              optional: true
        - name: ARGOCD_RECONCILIATION_JITTER
          valueFrom:
            configMapKeyRef:
              key: timeout.reconciliation.jitter
              name: argocd-cm
              optional: true
        - name: ARGOCD_REPO_ERROR_GRACE_PERIOD_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.repo.error.grace.period.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER
          valueFrom:
            configMapKeyRef:
              key: repo.server
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.repo.server.timeout.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_STATUS_PROCESSORS
          valueFrom:
            configMapKeyRef:
              key: controller.status.processors
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_OPERATION_PROCESSORS
          valueFrom:
            configMapKeyRef:
              key: controller.operation.processors
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_LOGFORMAT
          valueFrom:
            configMapKeyRef:
              key: controller.log.format
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_LOGLEVEL
          valueFrom:
            configMapKeyRef:
              key: controller.log.level
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_LOG_FORMAT_TIMESTAMP
          valueFrom:
            configMapKeyRef:
              key: log.format.timestamp
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_METRICS_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: controller.metrics.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.self.heal.timeout.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_BACKOFF_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.self.heal.backoff.timeout.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_BACKOFF_FACTOR
          valueFrom:
            configMapKeyRef:
              key: controller.self.heal.backoff.factor
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_BACKOFF_CAP_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.self.heal.backoff.cap.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SELF_HEAL_BACKOFF_COOLDOWN_SECONDS
          valueFrom:
            configMapKeyRef:
              key: controller.self.heal.backoff.cooldown.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SYNC_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: controller.sync.timeout.seconds
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_PLAINTEXT
          valueFrom:
            configMapKeyRef:
              key: controller.repo.server.plaintext
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_REPO_SERVER_STRICT_TLS
          valueFrom:
            configMapKeyRef:
              key: controller.repo.server.strict.tls
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_PERSIST_RESOURCE_HEALTH
          valueFrom:
            configMapKeyRef:
              key: controller.resource.health.persist
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APP_STATE_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: controller.app.state.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_SERVER
          valueFrom:
            configMapKeyRef:
              key: redis.server
              name: argocd-cmd-params-cm
              optional: true
        - name: REDIS_COMPRESSION
          valueFrom:
            configMapKeyRef:
              key: redis.compression
              name: argocd-cmd-params-cm
              optional: true
        - name: REDISDB
          valueFrom:
            configMapKeyRef:
              key: redis.db
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
          valueFrom:
            configMapKeyRef:
              key: controller.default.cache.expiration
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ADDRESS
          valueFrom:
            configMapKeyRef:
              key: otlp.address
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_INSECURE
          valueFrom:
            configMapKeyRef:
              key: otlp.insecure
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_HEADERS
          valueFrom:
            configMapKeyRef:
              key: otlp.headers
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_OTLP_ATTRS
          valueFrom:
            configMapKeyRef:
              key: otlp.attrs
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_NAMESPACES
          valueFrom:
            configMapKeyRef:
              key: application.namespaces
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_CONTROLLER_SHARDING_ALGORITHM
          valueFrom:
            configMapKeyRef:
              key: controller.sharding.algorithm
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_KUBECTL_PARALLELISM_LIMIT
          valueFrom:
            configMapKeyRef:
              key: controller.kubectl.parallelism.limit
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_K8SCLIENT_RETRY_MAX
          valueFrom:
            configMapKeyRef:
              key: controller.k8sclient.retry.max
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_K8SCLIENT_RETRY_BASE_BACKOFF
          valueFrom:
            configMapKeyRef:
              key: controller.k8sclient.retry.base.backoff
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_APPLICATION_CONTROLLER_SERVER_SIDE_DIFF
          valueFrom:
            configMapKeyRef:
              key: controller.diff.server.side
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_IGNORE_NORMALIZER_JQ_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: controller.ignore.normalizer.jq.timeout
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_HYDRATOR_ENABLED
          valueFrom:
            configMapKeyRef:
              key: hydrator.enabled
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_CLUSTER_CACHE_BATCH_EVENTS_PROCESSING
          valueFrom:
            configMapKeyRef:
              key: controller.cluster.cache.batch.events.processing
              name: argocd-cmd-params-cm
              optional: true
        - name: ARGOCD_CLUSTER_CACHE_EVENTS_PROCESSING_INTERVAL
          valueFrom:
            configMapKeyRef:
              key: controller.cluster.cache.events.processing.interval
              name: argocd-cmd-params-cm
              optional: true
        - name: KUBECACHEDIR
          value: /tmp/kubecache
        image: quay.io/argoproj/argocd:v3.0.6
        imagePullPolicy: Always
        name: argocd-application-controller
        ports:
        - containerPort: 8082
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /app/config/controller/tls
          name: argocd-repo-server-tls
        - mountPath: /home/argocd
          name: argocd-home
        - mountPath: /home/argocd/params
          name: argocd-cmd-params-cm
        - mountPath: /tmp
          name: argocd-application-controller-tmp
        workingDir: /home/argocd
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: argocd-application-controller
      volumes:
      - emptyDir: {}
        name: argocd-home
      - emptyDir: {}
        name: argocd-application-controller-tmp
      - name: argocd-repo-server-tls
        secret:
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
          optional: true
          secretName: argocd-repo-server-tls
      - configMap:
          items:
          - key: controller.profile.enabled
            path: profiler.enabled
          name: argocd-cmd-params-cm
          optional: true
        name: argocd-cmd-params-cm


----------------------------------------------
46.  platform/argocd/overlays/overlays/dev/patch-argocd-server-labels.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-server
spec:
  template:
    metadata:
      labels:
        log-collect: "enabled"


----------------------------------------------
47.  platform/argocd/overlays/overlays/dev/patch-argocd-repo-server-labels.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
spec:
  template:
    metadata:
      labels:
        log-collect: "enabled"


----------------------------------------------
48.  platform/argocd/overlays/overlays/dev/patch-argocd-application-controller-labels.yaml
----------------------------------------------

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: argocd-application-controller
spec:
  template:
    metadata:
      labels:
        log-collect: "enabled"


----------------------------------------------
49.  platform/argocd/overlays/overlays/dev/patch-argocd-applicationset-controller-labels.yaml
----------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-applicationset-controller
spec:
  template:
    metadata:
      labels:
        log-collect: "enabled"


----------------------------------------------
50.  platform/argocd/overlays/overlays/dev/kustomization.yaml
----------------------------------------------

resources:
- ../../base

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
patches:
- path: patch-argocd-server-labels.yaml
- path: patch-argocd-repo-server-labels.yaml
- path: patch-argocd-application-controller-labels.yaml
- path: patch-argocd-applicationset-controller-labels.yaml


----------------------------------------------
51.  policies/kyverno/enforce-argocd-only.yaml
----------------------------------------------

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-argocd-only
  annotations:
    policies.kyverno.io/title: Require ArgoCD label
    policies.kyverno.io/category: GitOps
    policies.kyverno.io/subject: Label
    policies.kyverno.io/description: >
      Prevent manual kubectl changes in GitOps-managed namespaces (e.g., myvote-dev)
      unless they are deployed by ArgoCD, as indicated by the presence of the label
      argocd.argoproj.io/instance.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    - name: require-argocd-label
      match:
        resources:
          kinds:
            - Deployment
            - Service
            - ConfigMap
            - Secret
            - Ingress
            - PersistentVolumeClaim
            - StatefulSet
            - Role
            - RoleBinding
            - ServiceAccount
          namespaces:
            - myvote-dev
            - myvote-staging
            - myvote-prod
      validate:
        message: >-
          Resources in GitOps-managed namespaces must include the label:
          argocd.argoproj.io/instance
        pattern:
          metadata:
            labels:
              argocd.argoproj.io/instance: "?*"


----------------------------------------------
52.  policies/kyverno/kustomization.yaml
----------------------------------------------

resources:
  - enforce-argocd-only.yaml


----------------------------------------------
53.  security/gatekeeper/templates/deny-manual-apply.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
54.  security/gatekeeper/constraints/only-argocd-can-deploy.yaml
----------------------------------------------

[EMPTY FILE]


----------------------------------------------
55.  security/kustomization.yaml
----------------------------------------------

[EMPTY FILE]


